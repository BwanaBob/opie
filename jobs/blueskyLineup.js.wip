// TODO:
// Grab image from posts and check for white band
// Crop image to remove white band
// Post lineup to Discord
// Once lineup has been posted, stop looking for the rest of the day (lastLineupFoundDate)
// add logger to bluesky code

// const { EmbedBuilder, ActivityType, AttachmentBuilder } = require("discord.js");
require("dotenv").config();
const Bluesky = require("../modules/blueSky.js");
const CronJob = require("cron").CronJob;
// const axios = require('axios');
// const sharp = require('sharp');
const options = require("../options.json");
const {
  schedule,
  scheduleTest,
  readBehind,
  targetUsername,
} = options.jobs.blueskyLineup;
const username = process.env.BLUESKY_USER_TEST;
const password = process.env.BLUESKY_PASS_TEST;
const postCache = new Set(); // Cache for post URIs
const startTime = new Date() - readBehind * 1000; // When the job was first scheduled

async function imageHasWhiteBand(
  imageUrl,
  bandHeight = 1,
  whiteThreshold = 240,
  percentageThreshold = 90
) {
  try {
    // Download the image
    const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
    const imageBuffer = Buffer.from(response.data);

    // Get image metadata
    const metadata = await sharp(imageBuffer).metadata();
    const { width, height } = metadata;

    if (!width || !height) {
      throw new Error("Failed to retrieve image dimensions.");
    }

    // Extract the top and bottom bands
    const topBand = await sharp(imageBuffer)
      .extract({ left: 0, top: 0, width, height: bandHeight })
      .raw()
      .toBuffer();

    // Check if the bands are mostly white
    const isTopWhite = bandIsWhite(
      topBand,
      width * bandHeight,
      whiteThreshold,
      percentageThreshold
    );

    return isTopWhite;
  } catch (err) {
    console.error("Error analyzing image:", err);
    return false;
  }
}

function bandIsWhite(
  bandBuffer,
  totalPixels,
  whiteThreshold,
  percentageThreshold
) {
  let whitePixelCount = 0;

  for (let i = 0; i < bandBuffer.length; i += 3) {
    const [r, g, b] = [bandBuffer[i], bandBuffer[i + 1], bandBuffer[i + 2]];
    if (r > whiteThreshold && g > whiteThreshold && b > whiteThreshold) {
      whitePixelCount++;
    }
  }

  const whitePercentage = (whitePixelCount / totalPixels) * 100;
  return whitePercentage >= percentageThreshold;
}

module.exports = {
  execute(client) {
    // const lineupChannel = client.channels.cache.get("392093299890061312"); // OPie #General
    const lineupChannel = client.channels.cache.get("392120898909634561"); // OPie #Bot-Test
    const jobLoadedDate = new Date().toLocaleString();
    console.log(`[${jobLoadedDate}] ⌛ CRON  | Job Loaded    | BlueSky Lineup`);
    var jobBlueskyLineup = new CronJob(
      schedule,
      async () => {
        //   '*/15 * * * * *', async () => {
        lineupChannel.send("Locating lineup");

        const bluesky = new Bluesky(username, password);

        // Fetch posts from the target user
        try {
          const { posts, nextCursor } = await bluesky.getPostsFromUser(
            targetUsername
          );

          if (posts.length > 0) {
            // console.log("Found posts:", posts.length);

            for (const post of posts) {
              if (!postCache.has(post.post.uri)) {
                // post has not been retrieved previously
                postCache.add(post.post.uri); // Add to cache
                if (new Date(post.post.indexedAt) >= startTime) {
                  // post is new
                  for (const image of post.post.embed?.images) {
                    const imageURL = image.fullsize;
                    console.log("New Image: ", imageURL);
                    lineupChannel.send(`New Image:\n${imageURL}`);
                    // const hasBand = await imageHasWhiteBand(imageURL);
                    // console.log(hasBand);
                  }
                } else {
                  console.log("Previously unseen post is not new.");
                }
              }
            }

            // console.log("Next page cursor:", nextCursor);
          } else {
            console.log("No posts found.");
          }
        } catch (error) {
          console.error("Error in Bluesky module:", error);
        }
        const jobExecutedDate = new Date().toLocaleString();
        console.log(
          `[${jobExecutedDate}] ⌛ CRON  | Job Executed  | BlueSky Lineup`
        );
      },
      null,
      true,
      "America/Chicago"
    );
  },
};
